var SmartMessenger=function(){'use strict';// Create a global stack, event listener with callback function
// Create a callback for the mesasge event.
// TODO: Use a proper UUID generator
/* eslint-disable no-bitwise, no-mixed-operators */function a(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,a=>{const b=0|16*Math.random(),c="x"===a?b:8|3&b;return c.toString(16)})}/* eslint-enable no-bitwise, no-mixed-operators */ // Add the callback to an event listener
const b={};window.addEventListener("message",function(a){return a&&a.data&&a.data.responseToMessageId&&b[a.data.responseToMessageId]&&b[a.data.responseToMessageId](a)},!1);/**
   * SmartMessenger
   *
   * @example
   *
   * const urlParams = new URLSearchParams(window.location.search);
   * const targetOrigin = urlParams.get('smart_messaging_origin') || '*';
   * const targetWindow = window.opener || window.parent;
   *
   * const messenger = new SmartMessenger(targetWindow, targetOrigin);
   * const payload = { resourceType: "Basic" };
   *
   * messenger.send('scratchpad.create', payload, (event) => {
   *  console.log(event);
   *  // ...
   * });
   *
   */class c{constructor(a,b){this.targetWindow=a,this.targetOrigin=b}// Build message, postMessage and add to the eventHandler stack
send(a,d,e){const f=c.buildMessage(a,d);this.targetWindow.postMessage(f,this.targetOrigin),b[f.messageId]=e}static buildMessage(b,c){return{messageId:a(),messageType:b,payload:c}}}return c}();
//# sourceMappingURL=index.min.js.map
